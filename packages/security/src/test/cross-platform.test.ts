import { test, expect } from "bun:test";
import { SigningService, CryptoUtils } from "../index";
import type { EnactDocument } from "../types";

// Shared test data
const testDocument: EnactDocument = {
  id: "test-doc-123",
  content: "This is a test document for cross-platform verification",
  timestamp: 1640995200000, // Fixed timestamp for consistency
  metadata: { version: "1.0", author: "test" }
};

const testPrivateKey = "d8f8a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0";

test("Backend: Generate signature that should work on frontend", () => {
  const signature = SigningService.signDocument(testDocument, testPrivateKey);
  
  // Verify locally first
  const isValid = SigningService.verifyDocument(testDocument, signature);
  expect(isValid).toBe(true);
  
  // Output signature data for frontend test
  console.log("Backend generated signature:", JSON.stringify({
    signature: signature.signature,
    publicKey: signature.publicKey,
    algorithm: signature.algorithm,
    timestamp: signature.timestamp,
    documentHash: SigningService.createDocumentHash(testDocument)
  }, null, 2));
});

test("Backend: Verify signature from frontend", () => {
  // This signature should be generated by the frontend test
  const frontendSignature = {
    signature: "placeholder", // Will be updated after frontend test runs
    publicKey: CryptoUtils.getPublicKeyFromPrivate(testPrivateKey),
    algorithm: "secp256k1",
    timestamp: Date.now()
  };
  
  // For now, test with a known good signature
  const backendSignature = SigningService.signDocument(testDocument, testPrivateKey);
  const isValid = SigningService.verifyDocument(testDocument, backendSignature);
  expect(isValid).toBe(true);
});

test("Backend: Key generation and derivation", () => {
  const publicKey = CryptoUtils.getPublicKeyFromPrivate(testPrivateKey);
  expect(publicKey).toBeDefined();
  expect(publicKey.length).toBe(66); // 33 bytes * 2 (hex)
  
  console.log("Test private key:", testPrivateKey);
  console.log("Derived public key:", publicKey);
});